name: Deploy
on:
  workflow_run:
    workflows: ["Run Tests"]  # Name of the test workflow
    types:
      - completed
  workflow_dispatch:
    
jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    name: "Deploy to VPS"
    outputs:
      ssh_result:          ${{ steps['configure-ssh'].outputs.result || steps['configure-ssh'].outcome }}
      deploy_fail_result:  ${{ steps['deploy-failure'].outputs.result || steps['deploy-failure'].outcome }}
      deploy_site_result:  ${{ steps['deploy-site'].outputs.result || steps['deploy-site'].outcome }}
      container_result:    ${{ steps['container_status'].outputs.result || steps['container_status'].outcome }}
      overall:             ${{ steps.compose.outputs.overall }}
      summary:             ${{ steps.compose.outputs.summary }}
    steps:
      - name: Configure SSH
        id: configure-ssh
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy-key.pem
          chmod 600 ~/.ssh/deploy-key.pem
          cat >> ~/.ssh/config << END
          Host my-vps
            Hostname $SSH_IP
            User $SSH_USER
            IdentityFile ~/.ssh/deploy-key.pem
            StrictHostKeyChecking no
          END
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_IP: ${{ secrets.SSH_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
      - name: Simulate Deployment Failure
        id: deploy-failure
        run: |
          echo "Deploying to the server..."
          # Simulate a failure (e.g., non-zero exit code)
          exit 1  # Force failure
      - name: Deploy site
        id: deploy-site
        run: |
          ssh my-vps "cd ${{ secrets.PROJECT_ROOT }} && chmod +x ./redeploy-site.sh && ./redeploy-site.sh"
      - name: Print Out Container Status
        id: container_status
        if: ${{ success() }} 
        run: |
          ssh my-vps "cd ${{ secrets.PROJECT_ROOT }} && docker compose ps"
          NAMES=$(ssh my-vps "docker ps --format '{{.Names}}'")
          {
            echo "names<<EOF"
            echo "$NAMES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
      - name: Compose summary
        id: compose
        if: ${{ always() }}
        shell: bash
        run: |
          ch="${{ steps['configure-ssh'].outcome }}"
          df="${{ steps['deploy-failure'].outcome }}"
          ds="${{ steps['deploy-site'].outcome }}"
          cs="${{ steps.container_status.outcome }}"

          overall="success"
          for s in "$ch" "$df" "$ds" "$cs"; do
            [ "$s" = "success" ] || overall="failure"
          done

          summary=$(cat <<EOF
          **Deploy Result:** ${overall^^}

          **Steps:**
          - Configure SSH: \`$ch\`
          - Simulate Deploy Failure: \`$df\`
          - Deploy Site: \`$ds\`
          - Container Status: \`$cs\`
          EOF
          )

          if [ "$overall" = "success" ]; then
            names="${{ steps.container_status.outputs.names }}"
            summary="$summary

            **Running containers:**
            \`\`\`
            ${names:-none}
            \`\`\`
            "
            fi
          
          echo "overall=$overall" >> "$GITHUB_OUTPUT"
          echo "summary=$summary" >> "$GITHUB_OUTPUT"
          printf "%s\n" "$summary" >> "$GITHUB_STEP_SUMMARY"
  notify:
    name: Discord Notification
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Success to Discord
        if: ${{ needs.deploy.outputs.overall == 'success' }}
        run: |
          DESC=$(jq -Rs . <<< "${{ needs.deploy.outputs.summary }}")
          curl -s -X POST "$DISCORD_WEBHOOK" \
            -H "Content-Type: application/json" \
            -d @- <<JSON
          {
            "content":"âœ… **MLH Portfolio Deploy Succeeded** for \`${{ github.repository }}\` @ \`${{ github.ref_name }}\`",
            "embeds": [{
              "title": "Deployment Summary",
              "description": $DESC
            }]
          }
          JSON
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      - name: Send failure to Discord
        if: ${{ needs.deploy.outputs.overall != 'success' }}
        run: |
          DESC=$(jq -Rs . <<< "${{ needs.deploy.outputs.summary }}")
          curl -s -X POST "$DISCORD_WEBHOOK" \
            -H "Content-Type: application/json" \
            -d @- <<JSON
          {
            "content":"ðŸš¨ **MLH Portfolio Deploy Failed** for \`${{ github.repository }}\` @ \`${{ github.ref_name }}\`",
            "embeds": [{
              "title": "Deployment Summary",
              "description": $DESC,
              "color": 16711680
            }]
          }
          JSON
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}