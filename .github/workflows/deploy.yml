name: Deploy
on:
  workflow_run:
    workflows: ["Run Tests"]  # Name of the test workflow
    types:
      - completed
  workflow_dispatch:
    
jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} 
    runs-on: ubuntu-latest
    name: "Deploy to VPS"
    steps:
      - name: Configure SSH
        id: configure-ssh
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy-key.pem
          chmod 600 ~/.ssh/deploy-key.pem
          cat >> ~/.ssh/config << END
          Host my-vps
            Hostname $SSH_IP
            User $SSH_USER
            IdentityFile ~/.ssh/deploy-key.pem
            StrictHostKeyChecking no
          END
          echo "result=success" >> "$GITHUB_OUTPUT"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_IP: ${{ secrets.SSH_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
      - name: Simulate Deployment Failure
        id: deploy-failure
        run: |
          echo "Deploying to the server..."
          # Simulate a failure (e.g., non-zero exit code)
          exit 1  # Force failure
      - name: Deploy site
        id: deploy-site
        run: |
          ssh my-vps "cd ${{ secrets.PROJECT_ROOT }} && chmod +x ./redeploy-site.sh && ./redeploy-site.sh"
          echo "result=success" >> "$GITHUB_OUTPUT"
      - name: Print Out Container Status
        id: container_status
        run: |
          ssh my-vps "cd ${{ secrets.PROJECT_ROOT }} && docker compose ps"
          NAMES=$(ssh my-vps "docker ps --format '{{.Names}}'")
          echo "names=$NAMES" >> "$GITHUB_OUTPUT"
          echo "result=success" >> "$GITHUB_OUTPUT"
  notify:
    name: Discord Notification
    needs: [deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Compose message
        id: compose
        shell: bash
        run: |
          # Overall status
          overall="success"
          ch="${{ needs.deploy.configure-ssh.output.result }}"
          df="${{ needs.deploy.deploy-failure.output.result }}"
          ds="${{ needs.deploy.deploy-site.output.result }}"
          cs="${{ needs.deploy.container_status.output.result }}"

          if [[ "$ch" != "success" || "$df" != "success" || "$ds" != "success" || "$cs" != "success" ]]; then
            overall="failure"
          fi

          # Build a compact summary block
          summary=$(cat <<EOF
          **Deploy Result:** ${overall^^}

          **Jobs:**
          - Configure SSH: \`${ch}\`
          - Deploy Fails (should fail here): \`${df}\`
          - Deploy Site on VPS: \`${ds}\`
          - Container Status:\` ${cs}\`
          EOF
          )
          # Expose for next step
          echo "overall=$overall" >> "$GITHUB_OUTPUT"
          printf "%s" "$summary" > msg.txt

      - name: Send Success to Discord
        if: ${{ steps.compose.outputs.overall == 'success' }}
        run: |
          curl -s -X POST "$DISCORD_WEBHOOK" \
            -H "Content-Type: application/json" \
            -d @- <<JSON
          {
            "content":"âœ… **MLH Portfolio Deploy Succeeded** for \`${{ github.repository }}\` @ \`${{ github.ref_name }}\`",
            "embeds": [{
              "title": "Deployment Summary",
              "description": $(jq -Rs . < msg.txt)
            }]
          }
          JSON
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      - name: Send failure to Discord
        if: ${{ steps.compose.outputs.overall != 'success' }}
        run: |
          curl -s -X POST "$DISCORD_WEBHOOK" \
            -H "Content-Type: application/json" \
            -d @- <<JSON
          {
            "content":"ðŸš¨ **MLH Portfolio Deploy Failed** for \`${{ github.repository }}\` @ \`${{ github.ref_name }}\`",
            "embeds": [{
              "title": "Deployment Summary",
              "description": $(jq -Rs . < msg.txt),
              "color": 16711680
            }]
          }
          JSON
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}